import multiprocessing
from Note import Notes
import time
import Main
import threading

l = [([144, 64, 48], 0), ([144, 60, 48], 0), ([128, 64, 0], 1.5), ([144, 62, 48], 0), ([128, 60, 0], 0),
     ([144, 55, 47], 0), ([128, 62, 0], 1.5), ([144, 60, 39], 0), ([128, 55, 0], 0), ([144, 57, 47], 0),
     ([128, 60, 0], 1.5), ([144, 59, 45], 0), ([128, 57, 0], 0), ([144, 52, 45], 0), ([128, 59, 0], 1.5),
     ([144, 57, 43], 0), ([128, 52, 0], 0), ([144, 53, 47], 0), ([128, 57, 0], 1.5), ([144, 55, 48], 0),
     ([128, 53, 0], 0), ([144, 48, 41], 0), ([128, 55, 0], 1.5), ([144, 57, 48], 0), ([128, 48, 0], 0),
     ([144, 53, 52], 0), ([128, 57, 0], 1.5), ([144, 59, 51], 0), ([128, 53, 0], 0), ([144, 55, 53], 0),
     ([128, 59, 0], 0), ([144, 64, 47], 0), ([128, 55, 0], 0), ([144, 60, 54], 0), ([128, 64, 0], 1.5),
     ([144, 62, 45], 0), ([128, 60, 0], 0), ([144, 55, 49], 0), ([128, 62, 0], 1.5), ([144, 60, 43], 0),
     ([128, 55, 0], 0), ([144, 57, 51], 0), ([128, 60, 0], 1.5), ([144, 59, 44], 0), ([128, 57, 0], 0),
     ([144, 52, 45], 0), ([128, 59, 0], 1.5), ([144, 57, 48], 0), ([128, 52, 0], 0), ([144, 53, 44], 0),
     ([128, 57, 0], 1.5), ([144, 55, 45], 0), ([128, 53, 0], 0), ([144, 48, 42], 0), ([128, 55, 0], 1.5),
     ([144, 57, 55], 0), ([128, 48, 0], 0), ([144, 53, 52], 0), ([128, 57, 0], 1.5), ([144, 59, 56], 0),
     ([128, 53, 0], 0), ([144, 55, 53], 0), ([128, 59, 0], 1.5), ([144, 67, 61], 0), ([144, 76, 61], 0),
     ([128, 55, 0], 0), ([144, 60, 59], 0), ([128, 67, 0], 1.5), ([128, 76, 0], 0), ([144, 71, 47], 0),
     ([144, 74, 47], 0), ([128, 60, 0], 0), ([144, 55, 46], 0), ([128, 71, 0], 1.5), ([128, 74, 0], 0),
     ([144, 72, 43], 0), ([128, 55, 0], 0), ([144, 57, 47], 0), ([128, 72, 0], 1.5), ([144, 67, 44], 0),
     ([144, 71, 44], 0), ([128, 57, 0], 0), ([144, 52, 44], 0), ([128, 67, 0], 1.5), ([128, 71, 0], 0),
     ([144, 60, 46], 0), ([144, 69, 46], 0), ([128, 52, 0], 0), ([144, 53, 49], 0), ([128, 60, 0], 1.5),
     ([128, 69, 0], 0), ([144, 64, 46], 0), ([144, 67, 46], 0), ([128, 53, 0], 0), ([144, 48, 50], 0),
     ([128, 64, 0], 1.5), ([128, 67, 0], 0), ([144, 65, 46], 0), ([144, 69, 46], 0), ([128, 48, 0], 0),
     ([144, 53, 53], 0), ([128, 65, 0], 1.5), ([128, 69, 0], 0), ([144, 62, 52], 0), ([144, 71, 52], 0),
     ([128, 53, 0], 0), ([144, 55, 48], 0), ([128, 62, 0], 1.5), ([128, 71, 0], 0), ([144, 72, 63], 0),
     ([128, 55, 0], 0), ([144, 60, 78], 0), ([144, 64, 78], 0), ([128, 72, 0], 0.75), ([144, 72, 66], 0),
     ([144, 74, 70], 0.75), ([128, 60, 0], 0), ([128, 64, 0], 0), ([144, 55, 65], 0), ([144, 62, 65], 0),
     ([128, 72, 0], 0.0146484375), ([144, 71, 65], 0.7353515625), ([128, 74, 0], 0.0146484375),
     ([144, 72, 69], 0.7353515625), ([128, 55, 0], 0), ([128, 62, 0], 0), ([144, 57, 56], 0), ([144, 60, 56], 0),
     ([128, 71, 0], 0.0146484375), ([144, 76, 70], 0.7353515625), ([128, 72, 0], 0.0146484375),
     ([144, 79, 75], 0.7353515625), ([128, 57, 0], 0), ([128, 60, 0], 0), ([144, 52, 59], 0),
     ([128, 76, 0], 0.0146484375), ([144, 67, 50], 0.7353515625), ([128, 79, 0], 0.0146484375),
     ([144, 69, 51], 0.7353515625), ([128, 52, 0], 0), ([144, 53, 68], 0), ([144, 57, 68], 0),
     ([128, 67, 0], 0.0146484375), ([144, 65, 60], 0.7353515625), ([128, 69, 0], 0.0146484375),
     ([144, 64, 55], 0.7353515625), ([128, 53, 0], 0), ([128, 57, 0], 0), ([144, 48, 54], 0),
     ([128, 65, 0], 0.0146484375), ([144, 67, 66], 0.7353515625), ([128, 64, 0], 0.0146484375),
     ([144, 65, 66], 0.7353515625), ([128, 48, 0], 0), ([144, 53, 69], 0), ([144, 57, 69], 0),
     ([128, 67, 0], 0.0146484375), ([144, 72, 75], 0.7353515625), ([128, 65, 0], 0.0146484375),
     ([144, 71, 75], 0.7353515625), ([128, 53, 0], 0), ([128, 57, 0], 0), ([144, 55, 65], 0), ([144, 59, 65], 0),
     ([128, 72, 0], 0.0146484375), ([144, 67, 54], 0.7353515625), ([128, 71, 0], 0.0146484375),
     ([144, 72, 62], 0.7353515625), ([128, 55, 0], 0), ([128, 59, 0], 0), ([144, 60, 75], 0), ([144, 64, 75], 0),
     ([128, 67, 0], 0.0146484375), ([128, 72, 0], 0.697265625), ([144, 76, 88], 0.0380859375), ([144, 79, 97], 0.375),
     ([128, 76, 0], 0.005859375), ([128, 79, 0], 0.369140625), ([144, 79, 86], 0), ([128, 60, 0], 0), ([128, 64, 0], 0),
     ([144, 55, 71], 0), ([144, 81, 88], 0.375), ([128, 79, 0], 0.005859375), ([144, 79, 72], 0.369140625),
     ([128, 81, 0], 0.005859375), ([144, 77, 68], 0.369140625), ([128, 79, 0], 0.005859375),
     ([144, 76, 75], 0.369140625), ([128, 55, 0], 0), ([144, 57, 90], 0), ([144, 60, 90], 0),
     ([128, 77, 0], 0.005859375), ([128, 76, 0], 1.060546875), ([144, 76, 85], 0.05859375), ([128, 76, 0], 0.375),
     ([144, 76, 79], 0), ([128, 57, 0], 0), ([128, 60, 0], 0), ([144, 52, 78], 0), ([144, 55, 78], 0),
     ([144, 77, 80], 0.375), ([128, 76, 0], 0.005859375), ([144, 76, 78], 0.369140625), ([128, 77, 0], 0.005859375),
     ([144, 74, 76], 0.369140625), ([128, 76, 0], 0.005859375), ([144, 72, 76], 0.369140625), ([128, 52, 0], 0),
     ([128, 55, 0], 0), ([144, 53, 85], 0), ([144, 57, 85], 0), ([128, 74, 0], 0.005859375),
     ([144, 70, 73], 0.369140625), ([128, 72, 0], 0.005859375), ([144, 69, 75], 0.369140625),
     ([128, 70, 0], 0.005859375), ([144, 70, 73], 0.369140625), ([128, 69, 0], 0.005859375),
     ([144, 67, 73], 0.369140625), ([128, 53, 0], 0), ([128, 57, 0], 0), ([144, 48, 70], 0), ([144, 52, 70], 0),
     ([128, 70, 0], 0.005859375), ([144, 64, 65], 0.744140625), ([128, 67, 0], 0.0146484375),
     ([144, 60, 72], 0.7353515625), ([128, 48, 0], 0), ([128, 52, 0], 0), ([144, 53, 84], 0), ([144, 57, 84], 0),
     ([128, 64, 0], 0.0146484375), ([144, 65, 78], 0.7353515625), ([128, 60, 0], 0.0146484375),
     ([144, 64, 78], 0.3603515625), ([128, 65, 0], 0.005859375), ([144, 62, 72], 0.369140625), ([128, 53, 0], 0),
     ([128, 57, 0], 0), ([144, 55, 83], 0), ([144, 59, 83], 0), ([128, 64, 0], 0.005859375),
     ([144, 67, 92], 0.744140625), ([128, 62, 0], 0.0146484375), ([144, 65, 90], 0.3603515625),
     ([128, 67, 0], 0.005859375), ([128, 65, 0], 0.3486328125), ([128, 55, 0], 0.0205078125), ([128, 59, 0], 0),
     ([144, 60, 87], 0), ([144, 64, 87], 0), ([144, 72, 50], 0.75), ([144, 74, 54], 0.75), ([128, 60, 0], 0),
     ([128, 64, 0], 0), ([144, 55, 52], 0), ([128, 72, 0], 0.0146484375), ([144, 71, 62], 0.7353515625),
     ([128, 74, 0], 0.0146484375), ([144, 72, 66], 0.7353515625), ([128, 55, 0], 0), ([144, 57, 70], 0),
     ([144, 60, 70], 0), ([128, 71, 0], 0.0146484375), ([144, 64, 50], 0.7353515625), ([128, 72, 0], 0.0146484375),
     ([144, 67, 59], 0.7353515625), ([128, 57, 0], 0), ([128, 60, 0], 0), ([144, 52, 64], 0), ([144, 59, 64], 0),
     ([128, 64, 0], 0.0146484375), ([144, 69, 73], 1.1103515625), ([128, 67, 0], 0.0205078125),
     ([144, 65, 64], 0.3544921875), ([128, 52, 0], 0), ([128, 59, 0], 0), ([144, 53, 57], 0), ([144, 57, 57], 0),
     ([128, 69, 0], 0.005859375), ([144, 60, 52], 0.744140625), ([128, 65, 0], 0.0146484375),
     ([144, 64, 57], 0.7353515625), ([128, 53, 0], 0), ([128, 57, 0], 0), ([144, 48, 66], 0), ([144, 55, 66], 0),
     ([128, 60, 0], 0.0146484375), ([144, 67, 68], 0.7353515625), ([128, 64, 0], 0.0146484375),
     ([144, 65, 56], 0.7353515625), ([128, 48, 0], 0), ([128, 55, 0], 0), ([144, 53, 58], 0), ([144, 57, 58], 0),
     ([128, 67, 0], 0.0146484375), ([144, 64, 54], 0.7353515625), ([128, 65, 0], 0.0146484375),
     ([144, 62, 52], 0.7353515625), ([128, 53, 0], 0), ([128, 57, 0], 0), ([144, 55, 60], 0), ([144, 59, 60], 0),
     ([128, 64, 0], 0.0146484375), ([144, 67, 63], 0.7353515625), ([128, 62, 0], 0.0146484375),
     ([144, 60, 53], 0.7353515625), ([144, 64, 53], 0), ([128, 55, 0], 0), ([128, 59, 0], 0), ([144, 48, 51], 0),
     ([128, 67, 0], 0.0146484375), ([128, 60, 0], 2.8330078125), ([128, 64, 0], 0), ([128, 48, 0], 0.15234375)]
result = []


def getL():
    data = l.pop(0)
    dur = data[-1]
    note = data[0]
    note.append(0)
    print(dur)
    result.append(Notes.toNote(note))
    time.sleep(dur)


if __name__ == '__main__':
    game = threading.Thread(name='pygame', target=Main.main())
    notes = threading.Thread(name='notes', target=getL())
    start = time.time()
    game.start()
    notes.start()
    # while True:
    #     s = multiprocessing.Process(target=Main.main())
    #     p = multiprocessing.Process(target=getL())
    #     p.start(), s.start()
    #     # print(result)

    end = time.time()
    print(end - start)
